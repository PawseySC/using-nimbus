I"5#<h2 id="moving-data">Moving Data</h2>

<h2 id="backing-up">Backing Up</h2>

<p>To copy a file to your instance:</p>

<p>scp -i ~/.ssh/Nectar_Key <local-file-path> ubuntu@NNN.NNN.NNN.NNN:<instance-file-path></instance-file-path></local-file-path></p>

<p>replacing the N’s with your IP address.</p>

<p>Note: If you leave <instance-file-path> empty, it will copy your file into your ubuntu users home directory.</instance-file-path></p>

<p>For example, if you want to copy the file /home/username/foo.txt to your /data folder on the instance:</p>

<p>scp -i ~/.ssh/Nectar_Key /home/username/foo.txt ubuntu@NNN.NNN.NNN.NNN:/data</p>

<p>To copy a file from your instance to your local computer, you have to swap the order of the <local-file-path> and ubuntu@NNN.NNN.NNN.NNN:<instance-file-path> in the command above:</instance-file-path></local-file-path></p>

<p>scp -i ~/.ssh/Nectar_Key ubuntu@NNN.NNN.NNN.NNN:<instance-file-path> <local-file-path></local-file-path></instance-file-path></p>

<p>Note: If you use ”.” as <local-file-path>, it will copy your file into your current working directory.</local-file-path></p>

<p>For example, if you want to copy the file /data/foo.txt to your /home/username/ folder on your local computer:</p>

<p>scp -i ~/.ssh/Nectar_Key ubuntu@NNN.NNN.NNN.NNN:/data/foo.txt /home/username/</p>

<p>SCP is a popular solution that can prove helpful if you simply need to transfer files. However, if you need to list remote directories, create new directories, remove files, or do other administrative tasks, you’ll need to use SFTP or FTP.</p>

<p>Introduction
FTP, or “File Transfer Protocol” is a popular method of transferring files between two remote systems.</p>

<p>SFTP, which stands for SSH File Transfer Protocol, or Secure File Transfer Protocol, is a separate protocol packaged with SSH that works in a similar way over a secure connection. The advantage is the ability to leverage a secure connection to transfer files and traverse the filesystem on both the local and remote system.</p>

<p>In almost all cases, SFTP is preferable to FTP because of its underlying security features and ability to piggy-back on an SSH connection. FTP is an insecure protocol that should only be used in limited cases or on networks you trust.</p>

<p>Although SFTP is integrated into many graphical tools, this guide will demonstrate how to use it through its interactive command line interface.</p>

<p>How to Connect with SFTP
By default, SFTP uses the SSH protocol to authenticate and establish a secure connection. Because of this, the same authentication methods are available that are present in SSH.</p>

<p>We can establish an SSH connection and then open up an SFTP session using that connection by issuing the following command:</p>

<p>sftp sammy@your_server_ip_or_remote_hostname
You will connect the the remote system and your prompt will change to an SFTP prompt.</p>

<p>Getting Help in SFTP
The most useful command to learn first is the help command. This gives you access to a summary of the SFTP help. You can call it by typing either of these in the prompt:</p>

<p>help
?
This will display a list of the available commands:</p>

<p>Navigating with SFTP
We can navigate through the remote system’s file hierarchy using a number of commands that function similarly to their shell counterparts.</p>

<p>First, let’s orient ourselves by finding out which directory we are in currently on the remote system. Just like in a typical shell session, we can type the following to get the current directory:</p>

<p>pwd
Remote working directory: /home/demouser
We can view the contents of the current directory of the remote system with another familiar command:</p>

<p>ls
Summary.txt     info.html       temp.txt        testDirectory
Note that the commands within the SFTP interface are not the normal shell commands and are not as feature-rich, but they do implement some of the more important optional flags:</p>

<p>ls -la
drwxr-xr-x    5 demouser   demouser       4096 Aug 13 15:11 .
drwxr-xr-x    3 root     root         4096 Aug 13 15:02 ..
-rw——-    1 demouser   demouser          5 Aug 13 15:04 .bash_history
-rw-r–r–    1 demouser   demouser        220 Aug 13 15:02 .bash_logout
-rw-r–r–    1 demouser   demouser       3486 Aug 13 15:02 .bashrc
drwx——    2 demouser   demouser       4096 Aug 13 15:04 .cache
-rw-r–r–    1 demouser   demouser        675 Aug 13 15:02 .profile
. . .
To get to another directory, we can issue this command:</p>

<p>cd testDirectory
We can now traverse the remote file system, but what if we need to access our local file system? We can direct commands towards the local file system by preceding them with an “l” for local.</p>

<p>All of the commands discussed so far have local equivalents. We can print the local working directory:</p>

<p>lpwd
Local working directory: /Users/demouser
We can list the contents of the current directory on the local machine:</p>

<p>lls
Desktop         local.txt       test.html
Documents       analysis.rtf        zebra.html
We can also change the directory we wish to interact with on the local system:</p>

<p>lcd Desktop
Transferring Files with SFTP
Navigating the remote and local filesystems is of limited usefulness without being able to transfer files between the two.</p>

<p>Transferring Remote Files to the Local System
If we would like download files from our remote host, we can do so by issuing the following command:</p>

<p>get remoteFile
Fetching /home/demouser/remoteFile to remoteFile
/home/demouser/remoteFile                       100%   37KB  36.8KB/s   00:01
As you can see, by default, the “get” command downloads a remote file to a file with the same name on the local file system.</p>

<p>We can copy the remote file to a different name by specifying the name afterwards:</p>

<p>get remoteFile localFile
The “get” command also takes some option flags. For instance, we can copy a directory and all of its contents by specifying the recursive option:</p>

<p>get -r someDirectory
We can tell SFTP to maintain the appropriate permissions and access times by using the “-P” or “-p” flag:</p>

<p>get -Pr someDirectory
Transferring Local Files to the Remote System
Transferring files to the remote system is just as easily accomplished by using the appropriately named “put” command:</p>

<p>put localFile
Uploading localFile to /home/demouser/localFile
localFile                                     100% 7607     7.4KB/s   00:00
The same flags that work with “get” apply to “put”. So to copy an entire local directory, you can issue:</p>

<p>put -r localDirectory</p>

<p>One familiar tool that is useful when downloading and uploading files is the “df” command, which works similar to the command line version. Using this, you can check that you have enough space to complete the transfers you are interested in:</p>

<p>df -h
    Size     Used    Avail   (root)    %Capacity
  19.9GB   1016MB   17.9GB   18.9GB           4%
Please note, that there is no local variation of this command, but we can get around that by issuing the “!” command.</p>

<p>The “!” command drops us into a local shell, where we can run any command available on our local system. We can check disk usage by typing:</p>

<p>!
df -h
Filesystem      Size   Used  Avail Capacity  Mounted on
/dev/disk0s2   595Gi   52Gi  544Gi     9%    /
devfs          181Ki  181Ki    0Bi   100%    /dev
map -hosts       0Bi    0Bi    0Bi   100%    /net
map auto_home    0Bi    0Bi    0Bi   100%    /home</p>

<p>Any other local command will work as expected. To return to your SFTP session, type:</p>

<p>exit</p>

<p>You should now see the SFTP prompt return.</p>

<blockquote class="challenge">
  <h2 id="activity-copying-data-via-http">Activity: Copying data via HTTP</h2>
  <p>Type the following into your terminal, using your login name and the instance’s IP address:</p>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ ssh -i `name_of_your_key`.pem `login_name`@###.###.###.###
</code></pre></div>  </div>
  <p><br />
Having done that, your terminal should then display something like that shown in the figure below:<br /><br />
<kbd><img src="../fig/nimbus_logged_in2.png" /></kbd><br /><br /></p>
  <h4 id="congratulations-you-have-now-successfully-logged-on-to-your-instance">Congratulations, you have now successfully logged on to your instance!</h4>
</blockquote>

<blockquote class="challenge">
  <h2 id="activity-moving-data-via-ssh">Activity: Moving data via SSH</h2>

</blockquote>

<blockquote class="challenge">
  <h2 id="activity-managing-data-via-sftp">Activity: Managing data via SFTP</h2>

</blockquote>

<blockquote class="challenge">
  <h2 id="activity-backing-up-with-rsync">Activity: Backing up with rsync</h2>

</blockquote>

<blockquote class="challenge">
  <h2 id="activity-backing-up-with-openstack-tools">Activity: Backing up with OpenStack tools</h2>

</blockquote>
:ET